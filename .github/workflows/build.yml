name: Build and Deploy Java App Docker Image

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      security-events: write
      actions: read
      contents: read
    env:
      MYSQL_HOST_WITH_PORT: ${{ secrets.MYSQL_HOST_WITH_PORT }}
      MYSQL_DB_NAME: ${{ secrets.MYSQL_DB_NAME }}
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
    steps:
    - name: 'Checkout code'
      uses: 'actions/checkout@v3'
      
    - name: Build and analyze
      run: |
        mvn clean package

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
  
    - name: Scan for Secrets using Trivy
      uses: aquasecurity/trivy-action@0.20.0
      with:
        targets: 'src/'  # Replace 'src/' with your source code directory
        format: 'table'  # Output format (table, json, csv, etc.)
        ignore_unfixed: 'false'  # Whether to ignore unfixed vulnerabilities
        severity: 'HIGH,CRITICAL,MEDIUM,LOW'  # Minimum severity level to report (e.g., 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL')
        scan-type: 'fs'
        exit-code: '0'
        # scan-ref: '.'
        # trivy-config: trivy.yaml
    - name: Cache SonarQube packages
      uses: actions/cache@v1
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache Maven packages
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    # - name: Build and analyze
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    #   run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=java-code-wine-park -Dsonar.projectName='java-code-wine-park'
    - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.CICD_GITHUB_TOKEN}}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=githubaction-cicd
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}

    # # Step 9: Docker login to Google Artifact Registry
    # - name: 'Docker username and password'
    #   uses: 'docker/login-action@v1'
    #   with:
    #     registry: '${{ secrets.REGION }}-docker.pkg.dev' #gcr.io' # or REGION-docker.pkg.dev
    #     username: 'oauth2accesstoken'
    #     password: '${{ steps.auth.outputs.access_token }}'

    # - name: Build Docker Image
    #   run: |
    #     IMAGE="${{ secrets.IMAGE_NAME }}:${{ github.sha }}"
    #     docker build --build-arg MYSQL_HOST_WITH_PORT=$MYSQL_HOST_WITH_PORT --build-arg MYSQL_DB_NAME=$MYSQL_DB_NAME --build-arg MYSQL_USER=$MYSQL_USER --build-arg MYSQL_PASSWORD=$MYSQL_PASSWORD -t $IMAGE .

    # - name: Run Trivy vulnerability scanner
    #   uses: aquasecurity/trivy-action@0.20.0
    #   with:
    #     image-ref: ${{ secrets.IMAGE_NAME }}:${{ github.sha }}
    #     format: 'sarif'
    #     output: 'trivy-results.sarif'
    #     ignore-unfixed: true
    #     vuln-type: 'os,library'
    #     severity: 'CRITICAL,HIGH'

    # - name: Upload Trivy scan results to GitHub Security tab
    #   uses: github/codeql-action/upload-sarif@v3
    #   with:
    #     sarif_file: 'trivy-results.sarif'

    # - name: Docker Push to GAR
    #   run: |
    #     IMAGE="${{ secrets.IMAGE_NAME }}:${{ github.sha }}"
    #     docker push $IMAGE
